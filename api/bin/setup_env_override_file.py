import logging
import pathlib
from typing import Tuple

import click
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa

import src.logging
from src.util.local import error_if_not_local

logger = logging.getLogger(__name__)

EMPTY_LINE = "\n"

DEFAULT_DESCRIPTION = """# override.env
#
# Any environment variables written to this file
# will take precedence over those defined in local.env
#
# This file will not be checked into github and it is safe
# to store secrets here, however you should still follow caution
# with using any secrets locally if they cause the app to interact
# with external systems.
#
# This file was generated by running:
#    make setup-env-override-file
#
# Which runs as part of our "make init" flow.
#
# If you would like to re-generate this file, please run:
#    make setup-env-override-file args="--recreate"
#
# Note that this will completely erase any existing configuration you may have
"""

AUTHENTICATION_HEADER = """
############################
# Authentication
############################
"""


def get_keys() -> Tuple[str, str]:
    key = rsa.generate_private_key(public_exponent=65537, key_size=2048)

    private_key = key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption(),
    )

    public_key = key.public_key().public_bytes(
        encoding=serialization.Encoding.PEM, format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    # decode produces a multi-line key that looks like:
    # ------BEGIN...
    # ...
    # ------END...
    #
    # With a newline at the end we want to strip for formatting simplicity
    return private_key.decode().removesuffix("\n"), public_key.decode().removesuffix("\n")


def create_override_file(recreate: bool) -> None:
    override_file_path = pathlib.Path(__file__).parent.parent / "override.env"
    if override_file_path.exists():
        if not recreate:
            logger.info("override.env already exists, not recreating")
            return
        logger.info("Recreating existing override.env file")

    private_key, public_key = get_keys()

    with open(override_file_path, "w") as override_file:
        override_file.writelines(DEFAULT_DESCRIPTION)
        override_file.write(EMPTY_LINE)
        override_file.write(AUTHENTICATION_HEADER)
        override_file.write(EMPTY_LINE)
        override_file.write(f'API_JWT_PRIVATE_KEY="{private_key}"')
        override_file.write(EMPTY_LINE)
        override_file.write(EMPTY_LINE)
        override_file.write(f'API_JWT_PUBLIC_KEY="{public_key}"')
        override_file.write(EMPTY_LINE)

    logger.info("Created override.env file")


@click.command()
@click.option(
    "--recreate",
    is_flag=True,
    default=False,
    help="Whether to recreate the override file if it already exists",
)
def setup_env_override_file(recreate: bool) -> None:
    with src.logging.init("create_env_override_file"):
        error_if_not_local()
        create_override_file(recreate)
